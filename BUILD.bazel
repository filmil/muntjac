### NOTE!
### This is not a stand-alone repository. Do not expect it to compile on its
### own.

load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("//build/fusesoc:rules.bzl", "fusesoc_run")

# If the file core_rtl.bzl does not contain SOURCES, HEADERS and INCLUDE_DIRS,
# create the file, and add dummy empty entries for those lists.
load(":core_rtl.bzl",
    core_rtl_sources="SOURCES",
    core_rtl_headers="HEADERS",
    core_rtl_include_dirs="INCLUDE_DIRS")

exports_files(["**/*"])

exports_files(["BUILD.bazel"])

filegroup(
    name = "allfiles",
    srcs = glob(["**/*"]),
    visibility = ["//visibility:public"],
)


######################################################################
# Generating the verilator simulation for the muntjac core.
#
fusesoc_run(
    name = "muntjac_core_fusesoc",
    cores_root = ":BUILD.bazel",
    output_groups = {
        "executables": [
            "sim-verilator/muntjac_core",
        ],
    },
    systems = ["lowrisc:muntjac:core_tb:0.1"],
    target = "sim",
    tool = "verilator",
)

filegroup(
    name = "muntjac_core",
    srcs = [":muntjac_core_fusesoc"],
    # Extracted from the 'executables' output group, contains only a single
    # executable file.
    output_group = "executables",
    visibility = ["//visibility:public"],
)
#
######################################################################

######################################################################
# The trickery below is used to run a dockerized fusesoc vivado build,
# and steal the files list from there. We inject a custom EDALIZE_LAUNCHER
# which is a script that neutralizes the vivado tool invocations, but
# records the list of files that vivado would have processed.
#
# We then sort the files into  output groups, which can then be used in
# regular bazel rules.
#
# The eagle rules below are used to generate the file :core_rtl.bzl which
# contains the list of files, to be used in output groups. This file is
# autogenerated, and guarded by diff tests, so when core_rtl changes contents,
# diff tests will fail and force running the generate step.
#
fusesoc_run(
    name = "core_rtl",
    cores_root = ":BUILD.bazel",
    env = {
        # Wrap the launcher with our binary that just records invocations.
        # The /tools dir is a convention. All stand-alone tools are visible
        # in this directory.
        "EDALIZE_LAUNCHER": "/tools/edalize_launch",
        # The file name generated in the output directory of the fusesoc_run
        # rule.
        "EDALIZE_LAUNCHER_OUTPUT": "core_rtl.bzl",
        # The input file name from running edalize via fusesoc.
        "EDALIZE_LAUNCHER_EDAFILE": "lowrisc_muntjac_core_0.1.eda.yml",
    },
    output_groups = {
        # This generated file contains the bazel file lists for this rule.
        "bzl": [ "default-vivado/core_rtl.bzl" ],
        # List of all source files (no headers).
        "sources": core_rtl_sources,
        # List of all header files.
        "headers": core_rtl_headers,
    },
    systems = ["lowrisc:muntjac:core"],
    target = "default",
    tool = "vivado",
    tools = [
        "//build/bin/edalize_launch",
    ],
)

filegroup(
    name = "core_rtl_bzl",
    srcs = [":core_rtl"],
    output_group = "bzl",
    visibility = ["//visibility:public"],
)

filegroup(
    name = "core_rtl_srcs",
    srcs = [":core_rtl"],
    output_group = "sources",
    visibility = ["//visibility:public"],
)

filegroup(
    name = "core_rtl_hdrs",
    srcs = [":core_rtl"],
    output_group = "headers",
    visibility = ["//visibility:public"],
)
#
######################################################################

######################################################################
# Trick for generating files, from Alex Eagle:
# https://www.aspect.dev/blog/bazel-can-write-to-the-source-folder
_GENERATED = {
    "third_party/muntjac/core_rtl.bzl": [
        "//third_party/muntjac:core_rtl_bzl",
        # This is the path at which the generator outputs the core_rtl.bzl file.
        "//third_party/muntjac:build.core_rtl/default-vivado/core_rtl.bzl",
    ],
}

[
    diff_test(
        name = "check_" + k.replace("third_party/muntjac/", ""),
        failure_message = "Please run:  bazel run //third_party/muntjac:update",
        file1 = k.replace("third_party/muntjac/", ""),
        file2 = v[0],
    )
    for [
        k,
        v,
    ] in _GENERATED.items()
]

write_file(
    name = "gen_update",
    out = "update.sh",
    content = [
        "#!/usr/bin/env bash",
        "set -x",
        "cd $BUILD_WORKSPACE_DIRECTORY",
    ] + [
        "cp -fv bazel-bin/{1} {0}".format(
            k,
            v[1].replace("//", "").replace(":", "/"),
        )
        for [
            k,
            v,
        ] in _GENERATED.items()
    ],
)

# Run this target to regenerate any files that need automatic generation.
# There is no need to remember to do this: when files go out of sync, the diff
# tests above will fail and tell you to run this target.
sh_binary(
    name = "update",
    srcs = ["update.sh"],
    data = [ v[0] for v in _GENERATED.values()],
)
######################################################################
